/**
 * Created by jwm_000 on 2015-10-06.
 */

var ColumnChart = (function (window, d3, undefined){

    var padding = {left: 40, right: 20, top: 20, bottom: 30},
        width = 500,
        height = 500,
        gutter = {left:4, bottom:0},
        fills = ["#f76869", "#5da2e6", "#00bf88", "#f4c100", "#bf5bf3", "#3eb5ac" , "#f58410", "#f94a76", "#97d54c", "#f0a0dd" ,
                    "#b2485f", "#9b9c9a", "#49ddff", "#306555", "#003366", "#7fbcff", "#ba8d72", "#ba8d72", "#8c7721", "#6db5a1"];
    var ColumnChart = function () {
        this.options = {};

        this.draw = function () {

            var options = this.options;

            options.categoryField = options.categoryField || "category";
            options.padding = options.padding || padding;
            options.gutter = options.gutter || gutter;
            options.fills = options.fills || fills;

            options.width = options.width || width;
            options.height = options.height || height;

            var innerWidth = options.width - padding.left - padding.right;
            var innerHeight = options.height - padding.top - padding.bottom;

            var xScale = d3.scale.ordinal()
                .rangeRoundBands([0, innerWidth], 0.1);

            var yScale = d3.scale.linear()
                .rangeRound([innerHeight, 0]);

            var color = d3.scale.ordinal()
                .range(options.fills);

            var xAxis = d3.svg.axis()
                .scale(xScale)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale(yScale)
                .orient("left");

            var holder = document.getElementById(options.contentHolder || "columnChart");
            var svg = d3.select(holder).append("svg")
                .attr("width", options.width)
                .attr("height", options.height);

            // series
            var seriesNames;
            if (options.series){
                seriesNames = options.series.map(function (d) {
                    return d.name;
                });
            }else {
                seriesNames = d3.keys(data[0]).filter(function (key) {
                    return key != options.categoryField
                });
            }

            //color.domain(seriesNames);

            yScale.domain([0, d3.max(data, function (d) {
                var max;
                for (var p in d) {
                    if (p == options.categoryField){
                        continue;
                    }

                    if (!max) {
                        max = d[p];
                    }
                    else {
                        if (d[p] > max) {
                            max = d[p];
                        }
                    }
                }
                return max;
            })]);

            var categoryNames = data.map(function (d) {
                return d[options.categoryField];
            });

            xScale.domain(categoryNames);


            var viewport = svg.append("g")
                .attr("transform", "translate(" + padding.left + ","
                + padding.top + ")");

            // y 축
            viewport.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            var columnGroup = viewport.append("g");

            var barGroups = columnGroup
                .selectAll("columnGroup")
                .data(data);

            var barGroupWidth = xScale.rangeBand();
            var barGroupPadding = (innerWidth - barGroupWidth * data.length) / data.length;
            barGroups.enter()
                .append("g")
                .attr("transform", function(d, i){
                    var gx = xScale.range()[i];
                    return "translate(" + gx + ", 0)";
                });

            var barWidthScale = d3.scale.ordinal()
                .domain(seriesNames)
                .rangeBands([0, barGroupWidth], 0.1);

            var barWidth = barWidthScale.rangeBand();

            var barPadding = (barGroupWidth - barWidth * seriesNames.length) / seriesNames.length;

            barGroups.select(function (d, i){
                var inc  = 0;

                for (var seriesIndex in seriesNames) {
                    var value = d[seriesNames[seriesIndex]];
                    var barHeight = innerHeight - yScale(value);

                    d3.select(this).append("rect")
                        .attr("class", "bar")
                        .attr("width", barWidth)
                        .attr("height", 0)
                        .attr("x", inc * (barWidth + barPadding))
                        .attr("y", innerHeight)
                        .style("fill", function(d, i){
                            return color(inc);
                        })
                        .transition()
                        .duration(1000)
                        .attr("y", function (d, i){
                            return innerHeight - barHeight;
                        })
                        .attr("height", barHeight);

                    //barX = barX + (barWidth + barGap);
                    inc++;
                }
                return this;
            });

            // x 축
            viewport.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + innerHeight + ")")
                .call(xAxis);

        }
    }

    return ColumnChart;
})(window, d3)
